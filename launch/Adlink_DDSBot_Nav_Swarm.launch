<?xml version="1.0"?>

<launch>
    <!-- ****************************** -->
    <!-- ROS 1.0 required nodes/setting -->
    <!-- ****************************** -->
    <!-- Parameters for autostart -->
    <!-- for amcl -->    
    <arg name="init_x" default="0" />
    <arg name="init_y" default="0" />
    <arg name="init_a" default="0" />

    <!-- Map server -->
    <node name="map_server" pkg="map_server" type="map_server" args="$(find adlink_ddsbot)/map/test/map.yaml"/>

    <!-- Boot up all sensors -->
    <include file="$(find adlink_ddsbot)/launch/Adlink_DDSBot_Sensors.launch" />

    <!-- Localization (amcl) -->
    <include file="$(find adlink_ddsbot)/launch/includes/adlink_amcl.launch.xml">
        <arg name="init_x" value="$(arg init_x)"/>
        <arg name="init_y" value="$(arg init_y)"/>
        <arg name="init_a" value="$(arg init_a)"/>
    </include>

    <!-- Navstack -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/> 
        <rosparam file="$(find adlink_ddsbot)/param/dwa_local_planner_params.yaml" command="load"/>   
        <!-- params for move_base -->
        <param name="planner_frequency" value="2" />
        <param name="controller_frequency" value="10.0" />
        <param name="controller_patience" value="3.0" />
        <param name="oscillation_timeout" value="10.0" />
        <param name="oscillation_distance" value="0.2" />
        <!-- params for costmap layers --> 
        <rosparam file="$(find adlink_ddsbot)/param/costmap_common_params.yaml" command="load" ns="local_costmap"/>
        <rosparam file="$(find adlink_ddsbot)/param/local_costmap_params.yaml" command="load"/>
        <rosparam ns="global_costmap" subst_value="true">  
            footprint: [[-0.1, -0.1], [-0.1, 0.1], [0.1, 0.1], [0.1, -0.1]]
            footprint_padding: 0.01
            transform_tolerance: 0.5
            update_frequency: 20.0
            publish_frequency: 20.0

            global_frame: map
            robot_base_frame: base_footprint
            resolution: 0.05

            rolling_window: false
            track_unknown_space: true

            plugins: 
                - {name: static,           type: "costmap_2d::StaticLayer"}            
                #- {name: sensor,           type: "costmap_2d::ObstacleLayer"}
                - {name: swarm_layer,      type: "ddsbot_swarm_layer::SwarmLayer"}
                - {name: inflation,        type: "costmap_2d::InflationLayer"}

            static:        
                map_topic: /map 
                subscribe_to_updates: true

            #sensor:
                #observation_sources: base_scan
                #base_scan: {data_type: LaserScan, expected_update_rate: 0.4, observation_persistence: 0.0, marking: true, clearing: true, max_obstacle_height: 0.4, min_obstacle_height: 0.08}

            swarm_layer:
               enabled:               true

            inflation:
                inflation_radius: 0.55
                cost_scaling_factor: 10.0
        </rosparam>  
        <remap from="/odom" to="/odometry/filtered"/>
    </node>

    <!-- ***************************** -->
    <!-- ROS 2.0 related nodes/setting -->
    <!-- ***************************** -->
    <!-- Parameters for autostart -->
    <!-- robot id (default based on hostname) for swarm network -->    
    <arg name="self_id" default="robot_1" />

    <!-- Setting for ROS 2-1 topics bridge -->
    <rosparam param="topics">[{'topic':swarm_poses, 'type':geometry_msgs/TransformStamped}]</rosparam> 

    <!-- pose to transform node -->
    <node name="pose_to_transform"   pkg="adlink_ddsbot"  type="pose_to_transform.py" output="screen">
        <param name="self_id" value="$(arg self_id)"/>
    </node>

    <!-- robot id filter node -->
    <node name="robot_id_filter"   pkg="adlink_ddsbot"  type="robot_id_filter.py" output="screen">
        <param name="self_id" value="$(arg self_id)"/>
        <param name="map_id" value="map"/>
        <param name="id_timeout" value="1"/> <!-- unit: sec -->
        <param name="fake_radius" value="0.11"/> <!-- unit: meter --> 
    </node>

</launch>
