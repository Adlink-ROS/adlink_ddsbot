<?xml version="1.0"?>

<launch>
    <!-- ****************************** -->
    <!-- ROS 1.0 required nodes/setting -->
    <!-- ****************************** -->
    <arg name="use_dwa" default="false" />

    <!-- for amcl -->    
    <arg name="init_x" default="-0.112" />
    <arg name="init_y" default="-0.091" />
    <arg name="init_a" default="-1.563" />

    <!-- Map server -->
    <node name="map_server" pkg="map_server" type="map_server" args="$(find adlink_ddsbot)/map/demp_gmp.yaml"/>

    <!-- Boot up all sensors -->
    <include file="$(find adlink_ddsbot)/launch/Adlink_DDSBot_Sensors.launch" >
        <arg name="wheel_separation" value="0.15"/> <!-- unit: meter -->
        <arg name="wheel_radius" value="0.0335"/> <!-- unit: meter -->
    </include>

    <!-- Localization (amcl) -->
    <include file="$(find adlink_ddsbot)/launch/includes/adlink_amcl.launch.xml">
        <arg name="init_x" value="$(arg init_x)"/>
        <arg name="init_y" value="$(arg init_y)"/>
        <arg name="init_a" value="$(arg init_a)"/>
    </include>

    <!-- Navstack -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" >
        <!-- local planner -->   
        <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" if="$(arg use_dwa)"/>      
        <rosparam file="$(find adlink_ddsbot)/param/dwa_local_planner_params.yaml" command="load" if="$(arg use_dwa)"/>
        <rosparam file="$(find adlink_ddsbot)/param/base_local_planner_params.yaml" command="load" unless="$(arg use_dwa)" />         
        <!-- params for move_base -->
        <param name="planner_frequency" value="0.1" />
        <param name="controller_frequency" value="10.0" />
        <param name="controller_patience" value="3.0" />
        <param name="oscillation_timeout" value="10.0" />
        <param name="oscillation_distance" value="0.2" />
        <param name="clearing_rotation_allowed" value="false" />
        <!-- params for costmap layers --> 
        <rosparam file="$(find adlink_ddsbot)/param/local_costmap_params.yaml" command="load"/>
        <rosparam file="$(find adlink_ddsbot)/param/global_costmap_params.yaml" command="load"/>
        <remap from="/odom" to="/odometry/filtered"/>
    </node>

    <!-- ***************************** -->
    <!-- ROS 2.0 related nodes/setting -->
    <!-- ***************************** -->
    <!-- Parameters for autostart -->
    <!-- robot id (default based on hostname) for swarm network -->    
    <arg name="self_id" default="$(env HOSTNAME)" />

    <!-- Setting for ROS 2-1 topics bridge -->
    <rosparam param="topics">[{'topic':swarm_poses, 'type':geometry_msgs/TransformStamped}, {'topic':swarm_goals, 'type':geometry_msgs/TransformStamped}]</rosparam> 

    <!-- tf to transform node -->
    <node name="tf_to_transform"   pkg="adlink_ddsbot"  type="tf_to_transform.py" output="screen">
        <param name="self_id" value="$(arg self_id)"/>
        <param name="map_frame" value="map" />
        <param name="base_frame" value="base_link" />
    </node>

    <!-- robot id filter node -->
    <node name="robot_id_filter"   pkg="adlink_ddsbot"  type="robot_id_filter.py" output="screen">
        <param name="self_id" value="$(arg self_id)"/>
        <param name="map_id" value="map"/>
        <param name="id_timeout" value="1"/> <!-- unit: sec -->
        <param name="fake_radius" value="0.3"/> <!-- unit: meter --> 
    </node>

    <!-- Goal filter node -->
    <node name="goal_filter"   pkg="adlink_ddsbot"  type="goal_filter.py" output="screen">
        <param name="self_id" value="$(arg self_id)"/>
    </node>
</launch>
