<launch>
    <!-- For Simulation -->
    <arg name="sim_mode" default="true" />
    <param name="/use_sim_time" value="$(arg sim_mode)"/>
    
    <!-- move base -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base_node" output="screen">
        <!-- params for move_base -->
        <param name="planner_frequency" value="2" />
        <param name="controller_frequency" value="10.0" />
        <param name="controller_patience" value="3.0" />
        <param name="oscillation_timeout" value="30.0" />
        <param name="oscillation_distance" value="0.5" />
        <!-- params for local control (dwa) -->
        <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
        <rosparam file="$(find adlink_ddsbot)/launch/Simulation/includes/dwa_local_planner_params.yaml" command="load" />
        <!-- params for costmap layers -->        
        <rosparam file="$(find adlink_ddsbot)/launch/Simulation/includes/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find adlink_ddsbot)/launch/Simulation/includes/local_costmap_params.yaml" command="load" />
        <rosparam ns="global_costmap" subst_value="true"> 
            footprint: [[-0.12, -0.12], [-0.12, 0.12], [0.12, 0.12], [0.25, 0.0], [0.12, -0.12]]
            footprint_padding: 0.01         
            transform_tolerance: 0.5
            update_frequency: 20.0
            publish_frequency: 20.0

            global_frame: map
            robot_base_frame: base_link
            resolution: 0.05

            rolling_window: false
            track_unknown_space: true

            plugins: 
                - {name: static,           type: "costmap_2d::StaticLayer"}            
                #- {name: sensor,           type: "costmap_2d::ObstacleLayer"}
                - {name: swarm_layer,      type: "ddsbot_swarm_layer::SwarmLayer"}
                - {name: inflation,        type: "costmap_2d::InflationLayer"}

            static:        
                map_topic: /map 
                subscribe_to_updates: false

            #sensor:
                #observation_sources: base_scan
                #base_scan: {data_type: LaserScan, expected_update_rate: 0.4, observation_persistence: 0.0, marking: true, clearing: true, max_obstacle_height: 0.4, min_obstacle_height: 0.08}

            swarm_layer:
               enabled:               true

            inflation:
                inflation_radius: 1
                cost_scaling_factor: 10.0
        </rosparam>       
    </node>
    
    <!-- map server -->
    <node name="map_server" pkg="map_server" type="map_server" args="$(find adlink_ddsbot)/launch/Simulation/includes/maze.yaml" respawn="false" />

    <!-- stage_ros -->
    <node pkg="stage_ros" type="stageros" name="stageros" args="$(find adlink_ddsbot)/launch/Simulation/includes/maze.world" respawn="false" >
        <param name="base_watchdog_timeout" value="0.2"/>
    </node>

    <!-- AMCL Config -->
    <include file="$(find adlink_ddsbot)/launch/Simulation/includes/amcl_node.xml"/>  

    <!-- RVIZ -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find adlink_ddsbot)/rviz_cfg/adlink_swarm_sim.rviz" />

    <!-- ***************************** -->
    <!-- ROS 2.0 related nodes/setting -->
    <!-- ***************************** -->
    <!-- Parameters for autostart -->
    <!-- robot id (default based on hostname) for swarm network -->    
    <arg name="self_id" default="$(env HOSTNAME)" />

    <!-- Setting for ROS 2-1 topics bridge -->
    <rosparam param="topics">[{'topic':swarm_poses, 'type':geometry_msgs/TransformStamped}, {'topic':swarm_goals, 'type':geometry_msgs/TransformStamped}]</rosparam> 

    <!-- tf to transform node -->
    <node name="tf_to_transform"   pkg="adlink_ddsbot"  type="tf_to_transform.py" output="screen">
        <param name="self_id" value="$(arg self_id)"/>
        <param name="sim_mode" value="$(arg sim_mode)" />
        <param name="map_frame" value="map" />
        <param name="base_frame" value="base_link" />
    </node>

    <!-- robot id filter node -->
    <node name="robot_id_filter"   pkg="adlink_ddsbot"  type="robot_id_filter.py" output="screen">
        <param name="self_id" value="$(arg self_id)"/>
        <param name="map_id" value="map"/>
        <param name="id_timeout" value="1"/> <!-- unit: sec -->
        <param name="fake_radius" value="0.3"/> <!-- unit: meter --> 
        <param name="sim_mode" value="$(arg sim_mode)" />
    </node>

    <!-- Goal filter node -->
    <node name="goal_filter"   pkg="adlink_ddsbot"  type="goal_filter.py" output="screen">
        <param name="self_id" value="$(arg self_id)"/>
        <param name="sim_mode" value="$(arg sim_mode)" />
    </node>
</launch>
