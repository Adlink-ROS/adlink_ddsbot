TrajectoryPlannerROS:
  #Set the acceleration limits of the robot
  acc_lim_theta: 1.0 
  acc_lim_x: 0.05
  acc_lim_y: 0.05

  #Set the velocity limits of the robot
  max_vel_x: 0.085
  min_vel_x: 0.02
  max_vel_theta: 0.7
  min_vel_theta: -0.7
  min_in_place_rotational_vel: 0.6

  #The velocity the robot will command when trying to escape from a stuck situation
  escape_vel: -0.1
  
  #For this example, we'll use a holonomic robot
  holonomic_robot: false

  #Set the tolerance on achieving a goal
  xy_goal_tolerance: 0.1
  yaw_goal_tolerance: 3.14 # final heading is not important 
  latch_xy_goal_tolerance: true

  #We'll configure how long and with what granularity we'll forward simulate trajectories
  sim_time: 4.0
  sim_granularity: 0.01 # meter
  vx_samples: 50
  vtheta_samples: 20

  #Parameters for scoring trajectories
  meter_scoring: true # true: unit is meter, false: cell
  pdist_scale: 3.0 # max is 5
  gdist_scale: 0.5 # max is 5
  heading_scoring: false
  heading_lookahead: 0.1 # meter
  heading_scoring_timestep: 0.5 # secs

  #We'll use the Dynamic Window Approach to control instead of Trajectory Rollout for this example
  dwa: false

  #How far the robot must travel before oscillation flags are reset
  oscillation_reset_dist: 0.05

  #Eat up the plan as the robot moves along it
  prune_plan: true
